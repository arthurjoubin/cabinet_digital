#!/usr/bin/env python3
"""
Script de correction automatique pour PythonAnywhere
Usage: python fix_pythonanywhere.py
"""

import os
import sys
import subprocess
from pathlib import Path

def print_header(title):
    """Affiche un en-t√™te format√©"""
    print(f"\n{'='*80}")
    print(f"üîß {title}")
    print(f"{'='*80}")

def print_section(title):
    """Affiche une section format√©e"""
    print(f"\n{'‚îÄ'*60}")
    print(f"üìã {title}")
    print(f"{'‚îÄ'*60}")

def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\nüîÑ {description}")
    print(f"Commande: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        if result.stdout:
            print(f"‚úÖ Succ√®s:\n{result.stdout}")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur: {e}")
        if e.stderr:
            print(f"D√©tails: {e.stderr}")
        return False, e.stderr

def create_env_file():
    """Cr√©e ou met √† jour le fichier .env"""
    print_section("Configuration du fichier .env")
    
    env_content = """# Variables d'environnement pour PythonAnywhere
SECRET_KEY=django-insecure-pythonanywhere-changez-cette-cle-12345
DEBUG=False
DJANGO_ENV=production
ALLOWED_HOSTS=votre-domaine.pythonanywhere.com,cabinetdigital.fr,www.cabinetdigital.fr
DATABASE_URL=sqlite:///db.sqlite3

# Email configuration
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=votre-email@gmail.com
EMAIL_HOST_PASSWORD=votre-mot-de-passe-app

# Autres configurations
COMPRESS_ENABLED=True
COMPRESS_OFFLINE=True
"""
    
    if Path('.env').exists():
        print("‚ö†Ô∏è  Fichier .env existant trouv√©")
        backup_path = '.env.backup'
        Path('.env').rename(backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√©/mis √† jour")
    print("‚ö†Ô∏è  IMPORTANT: Modifiez les valeurs dans .env avec vos vraies donn√©es!")

def install_dependencies():
    """Installe toutes les d√©pendances"""
    print_section("Installation des d√©pendances")
    
    if not Path('requirements.txt').exists():
        print("‚ùå requirements.txt non trouv√©")
        return False
    
    # Mise √† jour de pip
    run_command("python -m pip install --upgrade pip", "Mise √† jour de pip")
    
    # Installation des d√©pendances
    success, _ = run_command("pip install -r requirements.txt", "Installation des d√©pendances")
    
    if not success:
        print("‚ö†Ô∏è  Tentative d'installation individuelle des packages critiques...")
        critical_packages = [
            'Django>=5.0',
            'python-dotenv',
            'django-compressor',
            'pillow',
            'django-unfold',
            'gunicorn',
            'dj-database-url'
        ]
        
        for package in critical_packages:
            run_command(f"pip install {package}", f"Installation de {package}")
    
    return success

def setup_database():
    """Configure la base de donn√©es"""
    print_section("Configuration de la base de donn√©es")
    
    # Cr√©er les migrations
    success, _ = run_command("python manage.py makemigrations", "Cr√©ation des migrations")
    
    # Appliquer les migrations
    success, _ = run_command("python manage.py migrate", "Application des migrations")
    
    return success

def collect_static_files():
    """Collecte les fichiers statiques"""
    print_section("Collecte des fichiers statiques")
    
    # Cr√©er le r√©pertoire staticfiles s'il n'existe pas
    staticfiles_dir = Path('staticfiles')
    if not staticfiles_dir.exists():
        staticfiles_dir.mkdir(parents=True)
        print("‚úÖ R√©pertoire staticfiles cr√©√©")
    
    # Collecte des fichiers statiques
    success, _ = run_command("python manage.py collectstatic --noinput", "Collecte des fichiers statiques")
    
    if not success:
        print("‚ö†Ô∏è  Tentative de collecte avec clear...")
        success, _ = run_command("python manage.py collectstatic --clear --noinput", "Collecte avec nettoyage")
    
    return success

def check_wsgi_config():
    """V√©rifie la configuration WSGI"""
    print_section("V√©rification WSGI")
    
    wsgi_content = """# WSGI configuration file for PythonAnywhere
import os
import sys

# Add your project directory to the Python path
path = '/home/yourusername/mysite'
if path not in sys.path:
    sys.path.insert(0, path)

# Set the Django settings module
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

# Import Django and setup
import django
django.setup()

# Import the WSGI application
from config.wsgi import application
"""
    
    print("üìã Configuration WSGI recommand√©e pour PythonAnywhere:")
    print(wsgi_content)
    
    # V√©rifier que le fichier wsgi.py existe
    wsgi_path = Path('config/wsgi.py')
    if wsgi_path.exists():
        print("‚úÖ Fichier config/wsgi.py trouv√©")
    else:
        print("‚ùå Fichier config/wsgi.py MANQUANT")

def create_pythonanywhere_wsgi():
    """Cr√©e un fichier WSGI sp√©cifique pour PythonAnywhere"""
    print_section("Cr√©ation du fichier WSGI PythonAnywhere")
    
    wsgi_content = """# WSGI configuration file for PythonAnywhere
# Remplacez 'yourusername' par votre nom d'utilisateur PythonAnywhere
# Remplacez 'cabinetdigital' par le nom de votre projet

import os
import sys

# Add your project directory to the Python path
path = '/home/yourusername/cabinetdigital'
if path not in sys.path:
    sys.path.insert(0, path)

# Set environment variables
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

# Load environment variables from .env file
from pathlib import Path
from dotenv import load_dotenv

env_path = Path(path) / '.env'
if env_path.exists():
    load_dotenv(env_path)

# Import Django and setup
import django
django.setup()

# Import the WSGI application
from config.wsgi import application

# This is the WSGI application object
# PythonAnywhere will use this
"""
    
    with open('wsgi_pythonanywhere.py', 'w') as f:
        f.write(wsgi_content)
    
    print("‚úÖ Fichier wsgi_pythonanywhere.py cr√©√©")
    print("‚ö†Ô∏è  IMPORTANT: Modifiez le chemin dans le fichier avec votre nom d'utilisateur!")

def test_django_setup():
    """Teste la configuration Django"""
    print_section("Test de la configuration Django")
    
    try:
        # Test d'import Django
        import django
        print(f"‚úÖ Django version: {django.get_version()}")
        
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
        django.setup()
        
        # Test des settings
        from django.conf import settings
        print(f"‚úÖ Settings charg√©s - DEBUG: {settings.DEBUG}")
        
        # Test de l'application WSGI
        from config.wsgi import application
        print("‚úÖ Application WSGI import√©e")
        
        # Test des v√©rifications Django
        from django.core.management import execute_from_command_line
        print("üîÑ Ex√©cution des v√©rifications Django...")
        execute_from_command_line(['manage.py', 'check'])
        print("‚úÖ V√©rifications Django r√©ussies")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test Django: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_deployment_checklist():
    """Cr√©e une checklist de d√©ploiement"""
    print_section("Cr√©ation de la checklist de d√©ploiement")
    
    checklist_content = """# Checklist de d√©ploiement PythonAnywhere

## 1. Fichiers de configuration
- [ ] .env configur√© avec les bonnes valeurs
- [ ] requirements.txt √† jour
- [ ] wsgi_pythonanywhere.py configur√© avec le bon chemin

## 2. Base de donn√©es
- [ ] Migrations cr√©√©es: `python manage.py makemigrations`
- [ ] Migrations appliqu√©es: `python manage.py migrate`
- [ ] Superuser cr√©√©: `python manage.py createsuperuser`

## 3. Fichiers statiques
- [ ] Collecte effectu√©e: `python manage.py collectstatic --noinput`
- [ ] R√©pertoire staticfiles cr√©√© et accessible

## 4. Configuration PythonAnywhere
- [ ] Application web cr√©√©e sur PythonAnywhere
- [ ] Fichier WSGI configur√© dans l'interface web
- [ ] Variables d'environnement d√©finies
- [ ] Domaine configur√© (si applicable)

## 5. Tests
- [ ] `python manage.py check` sans erreur
- [ ] Site accessible via l'URL PythonAnywhere
- [ ] Admin accessible
- [ ] Fichiers statiques charg√©s

## 6. S√©curit√©
- [ ] SECRET_KEY unique et s√©curis√©e
- [ ] DEBUG=False en production
- [ ] ALLOWED_HOSTS configur√© correctement
- [ ] Certificat SSL activ√© (si domaine personnalis√©)

## Variables d'environnement importantes
```
SECRET_KEY=votre-cle-secrete-unique
DEBUG=False
DJANGO_ENV=production
ALLOWED_HOSTS=votre-domaine.pythonanywhere.com,cabinetdigital.fr,www.cabinetdigital.fr
```

## Commandes utiles
```bash
# Red√©marrer l'application
# Via l'interface web PythonAnywhere

# Voir les logs
# Via l'interface web: Files > /var/log/

# Tester la configuration
python manage.py check

# Collecter les fichiers statiques
python manage.py collectstatic --noinput
```
"""
    
    with open('DEPLOYMENT_CHECKLIST.md', 'w') as f:
        f.write(checklist_content)
    
    print("‚úÖ Checklist de d√©ploiement cr√©√©e: DEPLOYMENT_CHECKLIST.md")

def main():
    """Fonction principale"""
    print_header("CORRECTION AUTOMATIQUE PYTHONANYWHERE")
    
    print(f"üìÇ R√©pertoire de travail: {os.getcwd()}")
    
    # V√©rifier la structure du projet
    if not Path('manage.py').exists():
        print("‚ùå manage.py non trouv√©. √ätes-vous dans le bon r√©pertoire ?")
        return
    
    print("‚úÖ Projet Django d√©tect√©")
    
    # √âtapes de correction
    steps = [
        ("Cr√©ation du fichier .env", create_env_file),
        ("Installation des d√©pendances", install_dependencies),
        ("Configuration de la base de donn√©es", setup_database),
        ("Collecte des fichiers statiques", collect_static_files),
        ("V√©rification WSGI", check_wsgi_config),
        ("Cr√©ation du fichier WSGI PythonAnywhere", create_pythonanywhere_wsgi),
        ("Test de la configuration Django", test_django_setup),
        ("Cr√©ation de la checklist", create_deployment_checklist),
    ]
    
    success_count = 0
    total_steps = len(steps)
    
    for description, function in steps:
        try:
            print_header(description)
            result = function()
            if result is not False:  # None ou True = succ√®s
                success_count += 1
                print(f"‚úÖ {description} - TERMIN√â")
            else:
                print(f"‚ö†Ô∏è  {description} - √âCHEC PARTIEL")
        except Exception as e:
            print(f"‚ùå Erreur lors de {description}: {e}")
            import traceback
            traceback.print_exc()
    
    # R√©sum√© final
    print_header("R√âSUM√â DE LA CORRECTION")
    print(f"üìä √âtapes r√©ussies: {success_count}/{total_steps}")
    
    if success_count == total_steps:
        print("üéâ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s!")
    else:
        print("‚ö†Ô∏è  Certaines corrections ont √©chou√©. V√©rifiez les messages ci-dessus.")
    
    print("\nüìã Actions manuelles restantes:")
    print("1. Modifiez le fichier .env avec vos vraies valeurs")
    print("2. Configurez l'application web sur PythonAnywhere")
    print("3. Uploadez le fichier wsgi_pythonanywhere.py dans l'interface web")
    print("4. Red√©marrez l'application web")
    print("5. Testez votre site")
    
    print("\nüìÑ Consultez DEPLOYMENT_CHECKLIST.md pour plus de d√©tails")

if __name__ == "__main__":
    main() 